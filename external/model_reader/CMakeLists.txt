project(ModelReader)
include(ExternalProject)
set(CMAKE_CXX_STANDARD 14)
set(RJSON_PATH CACHE PATH "./extern/rapidjson" )
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMake)
## Configure RapidJSON
#set(RAPIDJSON_USE_SSE2 OFF CACHE BOOL "Use SSE2 for RapidJSON")
#set(RAPIDJSON_USE_SSE42 ON CACHE BOOL "Use SSE4 for RapidJSON")
#find_package(RapidJSON REQUIRED)
#message("RD: ${RAPIDJSON_INCLUDE_DIRS}")
#if(${RAPIDJSON_USE_SSE42})
#    set(RAPIDJSON_CXX_FLAGS "-DRAPIDJSON_SSE42 -msse4.2")
#endif()
#message("RD FLAGS: ${RAPIDJSON_CXX_FLAGS}")
#include_directories("${RAPIDJSON_INCLUDE_DIRS}")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${RAPIDJSON_CXX_FLAGS}")

set(reader_srcs
        ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp tests/test_data.hh extern/CLI11.hh extern/rang.hh)
set(lib_srcs
        include/tn_parser.hh
        src/tn_parser.cpp
       src/utils.cpp src/utils.hh
        src/tn_neuron_interface.h
        extern/json.hpp
        extern/tqdm.h)

set(TN_READER_OMP 1 CACHE BOOL "Enable OP?")

if(TN_READER_OMP)
    find_package(OpenMP)
        if (OPENMP_FOUND)
            message(STATUS "Found OpenMP - set options")
            add_definitions(-DUSE_OMP=1)

            set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
            set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
            set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
        else()
            message(STATUS "Did not find OpenMP - not enabled.")
        endif()
endif()

## Testing Options:
set(TN_READER_TEST 1 CACHE BOOL "Enable testing of TN Reader?")
if(TN_READER_TEST)
    add_definitions(-DSRC_ROOT="${CMAKE_CURRENT_SOURCE_DIR}")
    add_definitions(-DDEBUG)
    set(DEBUG 1)
    message("Set up config files from ${CMAKE_CURRENT_SOURCE_DIR}/tests to ${CMAKE_BINARY_DIR}/bin/tests")
    configure_file("${CMAKE_CURRENT_SOURCE_DIR}/tests/BootCampExample11.json" ${CMAKE_BINARY_DIR}/bin/tests/BootCampExample11.json COPYONLY)
    configure_file("${CMAKE_CURRENT_SOURCE_DIR}/tests/tn_test_cf100.json" ${CMAKE_BINARY_DIR}/bin/tests/tn_test_cf100.json COPYONLY)
endif()

## Standards needed for rapidjson / model reader
add_definitions(-DRAPIDJSON_HAS_STDSTRING=1)
#ADD_SUBDIRECTORY(../libs/rapidjson ${CMAKE_BINARY_DIR}/libs)
INCLUDE_DIRECTORIES(
        ${MPI_INCLUDE_PATH}
        ${CMAKE_CURRENT_BINARY_DIR})


set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")

if(USE_SSE4_2)
    add_definitions(-DRAPIDJSON_SSE42)
        set(RAPIDJSON_USE_SSE42 TRUE)
        set(CMAKE_CXX "-march=native -mtune=native")
    message("RJSON using sse 4.2")
elseif(USE_SSE_2)
    add_definitions(-DRAPIDJSON_SSE2)
        set(RAPIDJSON_USE_SSE42 TRUE)
    message("RJSON using SSE 2")
else()
    message("No SIMD enabled for RJSON")
endif()
message("Checking path and local. Path: ${RJSON_PATH}")
find_package(RapidJSON PATHS RJSON_PATH)
find_package(RapidJSON PATHS RJSON_PATH CONFIG)
find_package(RapidJSON)
if(RapidJSON_FOUND)
    message("Found RapidJSON through macro")
    message("RapidJSON Path: ${RapidJSON_INCLUDE_DIRS}")
    message("RJSON custom flags: ${RapidJSON_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${RapidJSON_CXX_FLAGS})
else()
    set(RapidJSON_INCLUDE_DIRS extern)
    message("Did not find rapidjson - using internal build")
endif()

#message(STATUS "RJSON FLAGS: ${CMAKE_CXX_FLAGS}")

if(ARCH STREQUAL "ppc64le")
    #add_definitions(-DRAPIDJSON_ENDIAN=1)
        add_definitions(-DRAPIDJSON_ENDIAN=0)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y")
        message("ModelReader set to use ppc64le config")

        #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y")
    #message("Rapidjson is running in big endian mode.")
endif()

ADD_LIBRARY(ModelReaderLib ${lib_srcs})
ADD_EXECUTABLE(ModelReaderBin ${reader_srcs})

target_include_directories(ModelReaderLib PUBLIC
        ${RapidJSON_INCLUDE_DIRS}

        )
set_target_properties(ModelReaderBin
        PROPERTIES
        LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

target_link_libraries(ModelReaderLib m)
target_link_libraries(ModelReaderBin ModelReaderLib)

